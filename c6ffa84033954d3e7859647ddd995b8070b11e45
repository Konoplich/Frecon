{
  "comments": [
    {
      "key": {
        "uuid": "6b676fa0_67e43228",
        "filename": "term.c",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1150560
      },
      "writtenOn": "2016-11-09T19:42:58Z",
      "side": 1,
      "message": "cant we access and use font scaling var that is already in font.c?",
      "revId": "c6ffa84033954d3e7859647ddd995b8070b11e45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b676fa0_67eaf2c5",
        "filename": "term.c",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1001537
      },
      "writtenOn": "2016-11-09T19:54:20Z",
      "side": 1,
      "message": "it\u0027s more than just setting the value; font.c actually does a one-time pre-scaling step to cache all the scaled glyphs, so we need to go through the font_init(font_scaling) to initialize the new glyphs if scaling changes",
      "parentUuid": "6b676fa0_67e43228",
      "revId": "c6ffa84033954d3e7859647ddd995b8070b11e45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bad4bb0_9e9d1df1",
        "filename": "term.c",
        "patchSetId": 1
      },
      "lineNbr": 793,
      "author": {
        "id": 1117132
      },
      "writtenOn": "2016-11-09T01:09:59Z",
      "side": 1,
      "message": "Unrelated patch?",
      "range": {
        "startLine": 792,
        "startChar": 25,
        "endLine": 793,
        "endChar": 19
      },
      "revId": "c6ffa84033954d3e7859647ddd995b8070b11e45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebafdfaa_9b41aba8",
        "filename": "term.c",
        "patchSetId": 1
      },
      "lineNbr": 793,
      "author": {
        "id": 1001537
      },
      "writtenOn": "2016-11-09T01:12:55Z",
      "side": 1,
      "message": "it is needed for this patch to work. currently we\u0027re leaking a font_ref because after the end of splash screen (see splash.c: splash_run()) we call term_set_current_to(NULL) without properly releasing the font_ref. if font_ref never reaches 0 then font_init(scaling) would not update the glyphs.",
      "parentUuid": "4bad4bb0_9e9d1df1",
      "range": {
        "startLine": 792,
        "startChar": 25,
        "endLine": 793,
        "endChar": 19
      },
      "revId": "c6ffa84033954d3e7859647ddd995b8070b11e45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b676fa0_07853656",
        "filename": "term.c",
        "patchSetId": 1
      },
      "lineNbr": 793,
      "author": {
        "id": 1150560
      },
      "writtenOn": "2016-11-09T19:42:58Z",
      "side": 1,
      "message": "OK, so this change here is good. We defintely need to close term here so we don\u0027t leak terms.\n\nBut I think we should not set current term to NULL in splash run. we don\u0027t want splash term to die at the end of splash run. it needs to persist so the splash graphics is still there when all the boot-message/devmode/wipe/recovery stuff runs.",
      "parentUuid": "ebafdfaa_9b41aba8",
      "range": {
        "startLine": 792,
        "startChar": 25,
        "endLine": 793,
        "endChar": 19
      },
      "revId": "c6ffa84033954d3e7859647ddd995b8070b11e45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b676fa0_27e4faf4",
        "filename": "term.c",
        "patchSetId": 1
      },
      "lineNbr": 793,
      "author": {
        "id": 1001537
      },
      "writtenOn": "2016-11-09T19:54:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b676fa0_07853656",
      "range": {
        "startLine": 792,
        "startChar": 25,
        "endLine": 793,
        "endChar": 19
      },
      "revId": "c6ffa84033954d3e7859647ddd995b8070b11e45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}